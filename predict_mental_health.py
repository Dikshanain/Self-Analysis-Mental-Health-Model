{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1IEADT17P39kKiSXNU0q7BXVX51KBAx9D",
      "authorship_tag": "ABX9TyPqcCAamGFyf2s83Ty4VLG1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dikshanain/Self-Analysis-Mental-Health-Model/blob/main/predict_mental_health.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Objective**\n",
        "\n",
        "Develop a Self-Analysis Mental Health Model that predicts possible mental health conditions based on user-provided symptoms. The model should be designed for seamless integration into a chatbot or an application, with a focus on accuracy, interpretability, and efficiency. Additionally, a basic UI or command-line script should be provided for testing and interaction.\n"
      ],
      "metadata": {
        "id": "riO_nI6YdqUs"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BtgZUtUS0Gat",
        "outputId": "3eeaa139-baf0-4c32-dd50-734be0d39312"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive\n"
          ]
        }
      ],
      "source": [
        "%cd /content/drive/MyDrive"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Initial Observations:**\n",
        "\n",
        "The dataset has 1,259 rows and 27 columns.\n",
        "The \"Timestamp\" column is not needed for modeling.\n",
        "Missing values are present in columns like \"state\" (41% missing), \"self_employed\" (1.4%), \"work_interfere\" (21%), and \"comments\" (87%).\n",
        "The dataset contains both numerical and categorical data.\n",
        "The \"Age\" column might have outliers (e.g., extremely high or low values).\n",
        "The \"comments\" column is mostly empty and may not be useful.\n",
        "\n",
        "**Next Steps:**\n",
        "\n",
        "Remove unnecessary columns: Drop \"Timestamp\" and \"comments\".\n",
        "Handle missing values: Impute or drop missing data.\n",
        "Normalize categorical data: Standardize gender labels.\n",
        "EDA: Analyze age distribution, relationships between symptoms, and mental health conditions.\n",
        "Feature Engineering & Selection: Encode categorical variables and choose relevant features."
      ],
      "metadata": {
        "id": "UrASX_7B-dop"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.preprocessing import MinMaxScaler"
      ],
      "metadata": {
        "id": "nlwYLR350qUM"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the dataset\n",
        "file_path = \"survey.csv\"  # Update the path if needed\n",
        "df = pd.read_csv(file_path)"
      ],
      "metadata": {
        "id": "3iZAmGkw1EAj"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Data Preparation**"
      ],
      "metadata": {
        "id": "ksKBox2-eGOC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### STEP 1: DATA CLEANING ###\n",
        "\n",
        "# Drop unnecessary columns\n",
        "df.drop(columns=[\"Timestamp\", \"comments\"], inplace=True, errors=\"ignore\")\n",
        "\n",
        "# Standardize Gender labels\n",
        "df[\"Gender\"] = df[\"Gender\"].str.lower().str.strip()\n",
        "gender_map = {\n",
        "    \"male\": \"Male\", \"m\": \"Male\", \"man\": \"Male\",\n",
        "    \"female\": \"Female\", \"f\": \"Female\", \"woman\": \"Female\",\n",
        "    \"non-binary\": \"Other\", \"nb\": \"Other\", \"genderqueer\": \"Other\", \"agender\": \"Other\"\n",
        "}\n",
        "df[\"Gender\"] = df[\"Gender\"].replace(gender_map)\n",
        "\n",
        "# Remove age outliers (keeping values between 18-100)\n",
        "df = df[(df[\"Age\"] >= 18) & (df[\"Age\"] <= 100)]\n",
        "\n",
        "# Drop \"state\" column as it has too many missing values\n",
        "df.drop(columns=[\"state\"], inplace=True, errors=\"ignore\")"
      ],
      "metadata": {
        "id": "t6jp8f3z1Rn4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "33484314-2e51-40a7-fd6a-446e77e0014f"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-4-729e54fac73d>:19: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df.drop(columns=[\"state\"], inplace=True, errors=\"ignore\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### STEP 2: HANDLE MISSING VALUES ###\n",
        "\n",
        "# Fill missing values in \"self_employed\" with \"No\"\n",
        "df[\"self_employed\"].fillna(\"No\", inplace=True)\n",
        "\n",
        "# Fill missing values in \"work_interfere\" with \"Don't know\"\n",
        "df[\"work_interfere\"].fillna(\"Don't know\", inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N5HVr2TSFakz",
        "outputId": "de4f8ffc-ea93-46da-8395-35f041721cf5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-5718e463faba>:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[\"self_employed\"].fillna(\"No\", inplace=True)\n",
            "<ipython-input-5-5718e463faba>:7: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[\"work_interfere\"].fillna(\"Don't know\", inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### STEP 3 : NORMALIZATION ###\n",
        "# Initialize MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "# Normalize Age column\n",
        "df[\"Age\"] = scaler.fit_transform(df[[\"Age\"]])\n",
        "\n",
        "# Save cleaned dataset with normalization\n",
        "df.to_csv(\"survey_cleaned_normalized.csv\", index=False)\n",
        "\n",
        "print(\"Normalization Complete! Cleaned & normalized dataset saved as 'survey_cleaned_normalized.csv'.\")\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 360
        },
        "id": "YeKKjS0dBiD5",
        "outputId": "7cfd7545-7ed3-48a3-af0e-2dbac91fc265"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Normalization Complete! Cleaned & normalized dataset saved as 'survey_cleaned_normalized.csv'.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Age  Gender         Country self_employed family_history treatment  \\\n",
              "0  0.351852  Female   United States            No             No       Yes   \n",
              "1  0.481481    Male   United States            No             No        No   \n",
              "2  0.259259    Male          Canada            No             No        No   \n",
              "3  0.240741    Male  United Kingdom            No            Yes       Yes   \n",
              "4  0.240741    Male   United States            No             No        No   \n",
              "\n",
              "  work_interfere    no_employees remote_work tech_company  ...   anonymity  \\\n",
              "0          Often            6-25          No          Yes  ...         Yes   \n",
              "1         Rarely  More than 1000          No           No  ...  Don't know   \n",
              "2         Rarely            6-25          No          Yes  ...  Don't know   \n",
              "3          Often          26-100          No          Yes  ...          No   \n",
              "4          Never         100-500         Yes          Yes  ...  Don't know   \n",
              "\n",
              "                leave mental_health_consequence phys_health_consequence  \\\n",
              "0       Somewhat easy                        No                      No   \n",
              "1          Don't know                     Maybe                      No   \n",
              "2  Somewhat difficult                        No                      No   \n",
              "3  Somewhat difficult                       Yes                     Yes   \n",
              "4          Don't know                        No                      No   \n",
              "\n",
              "      coworkers supervisor mental_health_interview phys_health_interview  \\\n",
              "0  Some of them        Yes                      No                 Maybe   \n",
              "1            No         No                      No                    No   \n",
              "2           Yes        Yes                     Yes                   Yes   \n",
              "3  Some of them         No                   Maybe                 Maybe   \n",
              "4  Some of them        Yes                     Yes                   Yes   \n",
              "\n",
              "  mental_vs_physical obs_consequence  \n",
              "0                Yes              No  \n",
              "1         Don't know              No  \n",
              "2                 No              No  \n",
              "3                 No             Yes  \n",
              "4         Don't know              No  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3920304c-1641-4401-ad2f-608012415757\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Country</th>\n",
              "      <th>self_employed</th>\n",
              "      <th>family_history</th>\n",
              "      <th>treatment</th>\n",
              "      <th>work_interfere</th>\n",
              "      <th>no_employees</th>\n",
              "      <th>remote_work</th>\n",
              "      <th>tech_company</th>\n",
              "      <th>...</th>\n",
              "      <th>anonymity</th>\n",
              "      <th>leave</th>\n",
              "      <th>mental_health_consequence</th>\n",
              "      <th>phys_health_consequence</th>\n",
              "      <th>coworkers</th>\n",
              "      <th>supervisor</th>\n",
              "      <th>mental_health_interview</th>\n",
              "      <th>phys_health_interview</th>\n",
              "      <th>mental_vs_physical</th>\n",
              "      <th>obs_consequence</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.351852</td>\n",
              "      <td>Female</td>\n",
              "      <td>United States</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Often</td>\n",
              "      <td>6-25</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Somewhat easy</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Some of them</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Maybe</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.481481</td>\n",
              "      <td>Male</td>\n",
              "      <td>United States</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>More than 1000</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>Don't know</td>\n",
              "      <td>Don't know</td>\n",
              "      <td>Maybe</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Don't know</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.259259</td>\n",
              "      <td>Male</td>\n",
              "      <td>Canada</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>6-25</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Don't know</td>\n",
              "      <td>Somewhat difficult</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.240741</td>\n",
              "      <td>Male</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Often</td>\n",
              "      <td>26-100</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>Somewhat difficult</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Some of them</td>\n",
              "      <td>No</td>\n",
              "      <td>Maybe</td>\n",
              "      <td>Maybe</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.240741</td>\n",
              "      <td>Male</td>\n",
              "      <td>United States</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Never</td>\n",
              "      <td>100-500</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Don't know</td>\n",
              "      <td>Don't know</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Some of them</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Don't know</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3920304c-1641-4401-ad2f-608012415757')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3920304c-1641-4401-ad2f-608012415757 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3920304c-1641-4401-ad2f-608012415757');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-02f5f1ea-4ccc-4123-8945-ca8cb63556f0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-02f5f1ea-4ccc-4123-8945-ca8cb63556f0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-02f5f1ea-4ccc-4123-8945-ca8cb63556f0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Initialize the label encoder\n",
        "label_encoders = {}\n",
        "\n",
        "# Loop through all columns and apply encoding for categorical columns\n",
        "for col in df.select_dtypes(include=['object']).columns:\n",
        "    le = LabelEncoder()\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "    label_encoders[col] = le  # Store the encoder for later use\n",
        "\n",
        "# Check the dataset after encoding\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mC4k866QOW4K",
        "outputId": "be10e0fc-8c4b-45bb-8f8d-3a8966f59605"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        Age  Gender  Country  self_employed  family_history  treatment  \\\n",
            "0  0.351852       0       44              0               0          1   \n",
            "1  0.481481       1       44              0               0          0   \n",
            "2  0.259259       1        6              0               0          0   \n",
            "3  0.240741       1       43              0               1          1   \n",
            "4  0.240741       1       44              0               0          0   \n",
            "\n",
            "   work_interfere  no_employees  remote_work  tech_company  ...  anonymity  \\\n",
            "0               2             4            0             1  ...          2   \n",
            "1               3             5            0             0  ...          0   \n",
            "2               3             4            0             1  ...          0   \n",
            "3               2             2            0             1  ...          1   \n",
            "4               1             1            1             1  ...          0   \n",
            "\n",
            "   leave  mental_health_consequence  phys_health_consequence  coworkers  \\\n",
            "0      2                          1                        1          1   \n",
            "1      0                          0                        1          0   \n",
            "2      1                          1                        1          2   \n",
            "3      1                          2                        2          1   \n",
            "4      0                          1                        1          1   \n",
            "\n",
            "   supervisor  mental_health_interview  phys_health_interview  \\\n",
            "0           2                        1                      0   \n",
            "1           0                        1                      1   \n",
            "2           2                        2                      2   \n",
            "3           0                        0                      0   \n",
            "4           2                        2                      2   \n",
            "\n",
            "   mental_vs_physical  obs_consequence  \n",
            "0                   2                0  \n",
            "1                   0                0  \n",
            "2                   1                0  \n",
            "3                   1                1  \n",
            "4                   0                0  \n",
            "\n",
            "[5 rows x 24 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### STEP 4: EXPLORATORY DATA ANALYSIS (EDA) ###\n",
        "\n",
        "# Set Seaborn style\n",
        "sns.set_style(\"whitegrid\")\n",
        "\n",
        "# Plot Age Distribution\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(df[\"Age\"], bins=20, kde=True, color=\"blue\")\n",
        "plt.title(\"Age Distribution\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.show()\n",
        "\n",
        "# Gender Distribution\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.countplot(x=\"Gender\", data=df, palette=\"pastel\")\n",
        "plt.title(\"Gender Distribution\")\n",
        "plt.xlabel(\"Gender\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.show()\n",
        "\n",
        "# Family History vs. Seeking Treatment\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.countplot(x=\"family_history\", hue=\"treatment\", data=df, palette=\"coolwarm\")\n",
        "plt.title(\"Family History vs. Seeking Treatment\")\n",
        "plt.xlabel(\"Family History of Mental Illness\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.legend(title=\"Treatment Sought\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "GB3-j2hQGLJ2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "74d61f0d-3cc1-4e68-e1fd-601ee83c85ec"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArcAAAHWCAYAAABt3aEVAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAWtVJREFUeJzt3Xd4VFX+x/HPzKRRQyq9l0QkoSqCQVCKBUGKBcTuT0VBWctasCCioC4WLKtYV1kUWRAQQUVQWUQERFiqdKQJJIEQEkrKzO+P4yREWhJm5k55v57nPvdm5mbOd7gEPjlz7jk2l8vlEgAAABAE7FYXAAAAAHgK4RYAAABBg3ALAACAoEG4BQAAQNAg3AIAACBoEG4BAAAQNAi3AAAACBqEWwAAAAQNwi0AAACCBuEWAPzQzp07lZSUpM8//9zrbX3++edKSkrSzp07ix675JJLdNddd3m9bUlavHixkpKStHjxYp+0ByC4hVldAAB4y8SJE/XMM88oNTVV//nPfyytJSkpqejY4XCocuXKqlOnjtq0aaMBAwaoSZMmHmln4sSJqlChgvr16+eR1/Mkf64NQPCwuVwul9VFAIA3DBgwQPv27dOuXbs0Z84c1a9f37JakpKSdOGFF+qqq66Sy+VSTk6OfvvtN3399dc6cuSIHnroId16661F57tcLuXl5SksLEwOh6PU7Vx55ZWKiYnRhAkTSv09hYWFKigoUEREhGw2myTTc9u0aVONHz++9G+ynLU5nU7l5+crPDxcdjsfKAI4O/wrAiAo7dixQ8uXL9djjz2m2NhYzZw50+qS1KBBA1111VXq06ePbrjhBj377LP69ttvlZKSoueff17z588vOtdmsykyMrJMwbasDh8+LMn0JEdGRhYFW1+z2+2KjIwk2ALwCP4lARCUZs6cqejoaHXu3FmXXnrpKcPtgQMH9Pe//11t2rRRu3bt9Mgjj+i333476XjXzZs367777tP555+vlJQU9evXT/PmzTurOmNiYvTyyy8rLCxMb731VtHjJxtzm56erscee0wXXXSRWrRoobS0NN19991FY2UvueQSbdy4UUuWLFFSUpKSkpJ04403SioeV7tkyRI9/fTT6tChgzp37lziuePH3Lr9+OOPuuqqq5SSkqIrrrhCc+bMKfH866+/XmLIhdtfX/N0tZ1qzO1XX32lfv36KTU1Ve3bt9dDDz2kvXv3ljjn0UcfVevWrbV3717dc889at26tS644AK98MILKiwsLN1FABBUGHMLICjNnDlT3bt3V0REhK688kp9+umnWrlypVJTU4vOcTqduvvuu7Vy5UoNHDhQjRo10rx58/TII4+c8HobN27UwIEDVb16dd1xxx2qWLGivvrqKw0ZMkSvv/66unfvXu5aa9WqpfPOO0+LFy9WTk6OKleufNLz7r33Xm3atEk33HCDateurf3792vhwoX6448/VKdOHQ0fPlyjRo1SxYoVNXjwYElSfHx8idcYOXKkYmNjNWTIkKKe21PZtm2b7r//fg0YMEB9+/bV1KlTNWzYML333nu68MILy/QeS1Pb8T7//HM99thjSklJ0QMPPKDMzEx9/PHH+vXXXzV9+nRVrVq16NzCwkLdfvvtSk1N1cMPP6xFixbpgw8+UN26dXX99deXqU4AgY9wCyDorF69Wlu2bNGTTz4pSWrbtq1q1KihmTNnlgi3c+fO1fLlyzV8+HDdfPPNkqSBAweWGPvq9txzz6lmzZqaOnWqIiIiJEnXX3+9Bg4cqLFjx55VuJWkpk2batGiRdq5c6eSk5NPeD47O1vLly/Xww8/rNtvv73o8eNnNOjWrZteffVVxcTE6KqrrjppO9HR0frXv/5VquEO27Zt0+uvv64ePXpIkq6++mpddtllGjt2bJnDbWlqc8vPz9fYsWPVrFkzTZw4UZGRkZLMdbzrrrv0r3/9S/fdd1/R+ceOHdPll1+uIUOGSDLXsG/fvpoyZQrhFghBDEsAEHRmzpyp+Ph4tW/fXpIZv3rFFVdo9uzZJT6qXrBggcLDw3XttdcWPWa32zVo0KASr5eVlaWff/5Zl19+uXJycrR//37t379fBw4cUFpamrZt23bCx+VlVbFiRUlSbm7uSZ+PiopSeHi4lixZooMHD5a7nWuvvbbU43gTExNLhPbKlSurT58+Wrt2rdLT08tdw5msXr1amZmZGjhwYFGwlaQuXbqoUaNG+uGHH074noEDB5b4um3bticdZgEg+NFzCyCoFBYWatasWWrfvn2JcJOamqoPPvhAixYtUlpamiRp9+7dSkhIUIUKFUq8Rr169Up8vX37drlcLo0bN07jxo07abuZmZmqXr16uet2DxGoVKnSSZ+PiIjQQw89pBdeeEEXXnihWrZsqS5duqhPnz5KSEgodTt16tQp9bn169c/4SazBg0aSJJ27dpVpnbLYvfu3ZKkhg0bnvBco0aNtGzZshKPRUZGKjY2tsRj0dHRZ/VLAIDARbgFEFR+/vlnpaena9asWZo1a9YJz8+cObMo3JaW0+mUJN12223q1KnTSc/5ayAuq40bN8rhcJw2fN5yyy265JJLNHfuXP34448aN26c3nnnHX300Udq3rx5qdo5vifUE041w4Ivb+by5owSAAIP4RZAUJk5c6bi4uL01FNPnfDct99+q2+//VYjR45UVFSUatWqpcWLF+vIkSMlem+3b99e4vvq1q0rSQoPD1fHjh09XvPu3bu1dOlStWrV6pQ3k7nVq1dPt912m2677TZt27ZNffr00QcffKCxY8dKOnXYLI/ff/9dLperxGtu27ZNklS7dm1JKrqxKzs7u8RNXu7e1+OVtrZatWpJkrZu3aoOHTqUeG7r1q1FzwPAyTDmFkDQOHr0qObMmaMuXbrosssuO2EbNGiQcnNz9d1330mS0tLSlJ+fr8mTJxe9htPp1MSJE0u8blxcnM4//3x99tln2rdv3wnt7t+/v9w1Z2Vl6YEHHlBhYWHRLAInc+TIER07dqzEY/Xq1VOlSpWUl5dX9FiFChWUnZ1d7nqOt2/fPn377bdFX+fk5Gj69Ok655xzioYkuHusly5dWnTe4cOHNX369BNer7S1tWjRQnFxcZo0aVKJ9zZ//nxt3rxZXbp0Kec7AhAK6LkFEDS+++475ebm6pJLLjnp861atVJsbKy++OILXXHFFerWrZtSU1P1wgsvaPv27WrUqJG+++67orGax/c0jhgxQtdff7169eqla6+9VnXr1lVGRoZWrFihPXv26Isvvjhjfdu2bdOMGTPkcrmUm5tbtELZ4cOH9eijj+qiiy467ffecsstuuyyy9SkSRM5HA7NnTtXGRkZ6tmzZ9F55557rj799FP985//VP369RUbG3tC72dpNWjQQI8//rhWrVqluLg4TZ06VZmZmRozZkzRORdeeKFq1aqlxx9/XFu2bJHD4dDUqVMVExNzQu9taWsLDw/XQw89pMcee0w33HCDevbsWTQVWO3atXXLLbeU6/0ACA2EWwBB44svvlBkZOQpp6my2+3q0qWLZs6cqQMHDigmJkbjx4/Xc889p2nTpslut6t79+4aMmTI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ha644goNHjxYkyZNsro0lNLixYs1fvx4jRgxQp9//rneeOMNzZ8/X2+++abVpSHA0HPrYTExMXI4HCcMmM/MzDzhNxq3+Pj4E3ppT3c+vKc818/t/fff1zvvvKMPP/xQycnJ3iwTp1HWa7hjxw7t2rVLd999d9FjTqdTktS8eXN9/fXXqlevnneLRgnl+TlMSEhQWFiYHA5H0WONGjVSenq68vLyFBER4dWaUVJ5ruG4cePUu3fvoqFBSUlJOnz4sJ566indfffdstvpj/NnJ8syGRkZqly5sk97bSV6bj0uIiJC5557rhYtWlT0mNPp1KJFi9S6deuTfk+rVq30888/l3jsp59+UqtWrbxZKk6iPNdPkt59913985//1HvvvaeUlBRflIpTKOs1bNSokWbOnKnp06cXbZdcconat2+v6dOnq0aNGr4sHyrfz2GbNm20ffv2ol9MJGnbtm1KSEgg2FqgPNfw6NGjJwRY9y8rLpfLe8XCI/wpyxBuveDWW2/V5MmTNW3aNG3evFlPP/20jhw5on79+kmSHn74Yb300ktF5990001asGCBPvjgA23evFmvv/66Vq9erRtuuMGqtxDSynr93nnnHY0bN06jR49W7dq1lZ6ervT0dOXm5lr1FkJeWa5hZGSkmjVrVmKrWrWqKlWqpGbNmhGMLFLWn8OBAwcqKytLzz33nLZu3aoffvhB48eP16BBg6x6CyGvrNfw4osv1qeffqpZs2Zpx44dWrhwocaNG6eLL764RI88fCM3N1fr1q3TunXrJJmpEtetW6fdu3dLkl566SU9/PDDRecPGDBAO3bs0IsvvqjNmzdr4sSJ+uqrr3TLLbf4vHaGJXjBFVdcof379+u1115Tenq6zjnnHL333ntFH8X88ccfJX47bdOmjcaOHatXX31VL7/8sho0aKA333xTzZo1s+othLSyXr9JkyYpPz9f9913X4nXGTp0qO69916f1g6jrNcQ/qes17BmzZp6//33NWbMGPXu3VvVq1fXTTfdpDvuuMOqtxDyynoN7777btlsNr366qvau3evYmNjdfHFF+v++++36i2EtNWrV+umm24q+nrMmDGSpL59++r5559Xenq6/vjjj6Ln69atq/Hjx2vMmDH6+OOPVaNGDT377LPq1KmTz2u3uejrBwAAQJCg6wIAAABBg3ALAACAoEG4BQAAQNAg3AIAACBoEG4BAAAQNAi3AAAACBqEWwAAAAQNwi0AAACCBuEWAAAAQYNwCwABZPny5TrnnHN05513Wl0KAPglwi0ABJApU6bohhtu0NKlS7V3716rywEAv0O4BYAAkZubq9mzZ2vgwIHq0qWLpk2bVuL5efPmqUePHkpJSdGNN96oadOmKSkpSdnZ2UXn/PLLL7r++uuVmpqqzp0769lnn9Xhw4d9/VYAwGsItwAQIL766is1atRIjRo1Uu/evTV16lS5XC5J0o4dOzRs2DB17dpVM2bM0IABA/TKK6+U+P7t27frjjvuUI8ePfTFF1/olVde0bJlyzRq1Cgr3g4AeAXhFgACxJQpU9S7d29JUqdOnXTo0CEtWbJEkvTZZ5+pYcOGeuSRR9SoUSP17NlTffv2LfH948ePV69evXTLLbeoQYMGatOmjR5//HFNnz5dx44d8/n7AQBvCLO6AADAmW3ZskWrVq3Sm2++KUkKCwvTFVdcoSlTpqh9+/baunWrWrRoUeJ7UlNTS3z922+/af369Zo5c2bRYy6XS06nUzt37lTjxo29/0YAwMsItwAQAKZMmaKCggJ16tSp6DGXy6WIiAg99dRTpXqNw4cPa8CAAbrxxhtPeK5mzZoeqxUArES4BQA/V1BQoBkzZujRRx/VhRdeWOK5IUOG6Msvv1TDhg01f/78Es+tWrWqxNfNmzfXpk2bVL9+fa/XDABWYcwtAPi5H374QQcPHtTVV1+tZs2aldh69OihKVOm6LrrrtPWrVv1j3/8Q1u3btXs2bOLZlOw2WySpDvuuEPLly/XM888o3Xr1mnbtm2aO3eunnnmGSvfHgB4FOEWAPzclClT1LFjR1WpUuWE5y699FKtXr1aubm5GjdunL799lv17t1bn376qQYPHixJioiIkCQlJydrwoQJ2rZtm66//nr17dtXr732mhITE336fgDAm2wu9zwyAICg8tZbb2nSpEknDFcAgGDGmFsACBITJ05USkqKYmJitGzZMr3//vsaNGiQ1WUBgE8RbgEgSPz+++966623dPDgQdWqVUu33nqr7rrrLqvLAgCfYlgCAAAAggY3lAEAACBoEG4BAAAQNAi3AAAACBqEWwAAAAQNwi0AAACCBuEWAAAAQYNwCwAAgKBBuAUAAEDQ+H/PoIiQlitmdgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-42-90a48f5f2e22>:16: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=\"Gender\", data=df, palette=\"pastel\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### STEP 5: FEATURE ENGINEERING & SELECTION ###\n",
        "\n",
        "# Encode categorical features\n",
        "label_encoders = {}\n",
        "for column in df.select_dtypes(include=[\"object\"]).columns:\n",
        "    le = LabelEncoder()\n",
        "    df[column] = le.fit_transform(df[column])\n",
        "    label_encoders[column] = le  # Store encoders for future decoding\n",
        "\n",
        "# Save the cleaned dataset\n",
        "df.to_csv(\"survey_cleaned.csv\", index=False)\n",
        "\n",
        "# Display transformed dataset\n",
        "print(\"Data Preparation Complete! Cleaned dataset saved as 'survey_cleaned.csv'.\")\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "hOCfI7k9A0Hx",
        "outputId": "8e672e22-3479-4478-fb98-a0606e8a3277"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data Preparation Complete! Cleaned dataset saved as 'survey_cleaned.csv'.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Age  Gender  Country  self_employed  family_history  treatment  \\\n",
              "0  0.351852       0       44              0               0          1   \n",
              "1  0.481481       1       44              0               0          0   \n",
              "2  0.259259       1        6              0               0          0   \n",
              "3  0.240741       1       43              0               1          1   \n",
              "4  0.240741       1       44              0               0          0   \n",
              "\n",
              "   work_interfere  no_employees  remote_work  tech_company  ...  anonymity  \\\n",
              "0               2             4            0             1  ...          2   \n",
              "1               3             5            0             0  ...          0   \n",
              "2               3             4            0             1  ...          0   \n",
              "3               2             2            0             1  ...          1   \n",
              "4               1             1            1             1  ...          0   \n",
              "\n",
              "   leave  mental_health_consequence  phys_health_consequence  coworkers  \\\n",
              "0      2                          1                        1          1   \n",
              "1      0                          0                        1          0   \n",
              "2      1                          1                        1          2   \n",
              "3      1                          2                        2          1   \n",
              "4      0                          1                        1          1   \n",
              "\n",
              "   supervisor  mental_health_interview  phys_health_interview  \\\n",
              "0           2                        1                      0   \n",
              "1           0                        1                      1   \n",
              "2           2                        2                      2   \n",
              "3           0                        0                      0   \n",
              "4           2                        2                      2   \n",
              "\n",
              "   mental_vs_physical  obs_consequence  \n",
              "0                   2                0  \n",
              "1                   0                0  \n",
              "2                   1                0  \n",
              "3                   1                1  \n",
              "4                   0                0  \n",
              "\n",
              "[5 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-35e3342b-c82d-4186-a260-e19b2b5e2f60\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Country</th>\n",
              "      <th>self_employed</th>\n",
              "      <th>family_history</th>\n",
              "      <th>treatment</th>\n",
              "      <th>work_interfere</th>\n",
              "      <th>no_employees</th>\n",
              "      <th>remote_work</th>\n",
              "      <th>tech_company</th>\n",
              "      <th>...</th>\n",
              "      <th>anonymity</th>\n",
              "      <th>leave</th>\n",
              "      <th>mental_health_consequence</th>\n",
              "      <th>phys_health_consequence</th>\n",
              "      <th>coworkers</th>\n",
              "      <th>supervisor</th>\n",
              "      <th>mental_health_interview</th>\n",
              "      <th>phys_health_interview</th>\n",
              "      <th>mental_vs_physical</th>\n",
              "      <th>obs_consequence</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.351852</td>\n",
              "      <td>0</td>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.481481</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.259259</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.240741</td>\n",
              "      <td>1</td>\n",
              "      <td>43</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.240741</td>\n",
              "      <td>1</td>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35e3342b-c82d-4186-a260-e19b2b5e2f60')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-35e3342b-c82d-4186-a260-e19b2b5e2f60 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-35e3342b-c82d-4186-a260-e19b2b5e2f60');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7e594909-6d15-4cde-bca6-3f242deffbf3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e594909-6d15-4cde-bca6-3f242deffbf3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7e594909-6d15-4cde-bca6-3f242deffbf3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Model Development**"
      ],
      "metadata": {
        "id": "5v1C7ppie0Qj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "# Print available columns to confirm which ones exist\n",
        "print(\"Dataset Columns:\", df.columns)\n",
        "\n",
        "# Define Features (X) and Target (y)\n",
        "drop_columns = ['treatment', 'Timestamp', 'comments', 'Country']\n",
        "\n",
        "# Drop only the columns that exist in the dataset\n",
        "X = df.drop(columns=[col for col in drop_columns if col in df.columns])\n",
        "\n",
        "# Define Target Variable\n",
        "y = df['treatment']  # Ensure 'treatment' exists in the dataset\n",
        "\n",
        "# Train-test split (80% training, 20% testing)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Verify data shapes\n",
        "print(\"Shape of X:\", X.shape)\n",
        "print(\"Shape of y:\", y.shape)\n",
        "print(\"First few rows of X:\\n\", X.head())\n",
        "print(\"First few rows of y:\\n\", y.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YiboPef7fWqy",
        "outputId": "70691aa1-514d-4c44-b8b0-6ad1813dc5cb"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Columns: Index(['Age', 'Gender', 'Country', 'self_employed', 'family_history',\n",
            "       'treatment', 'work_interfere', 'no_employees', 'remote_work',\n",
            "       'tech_company', 'benefits', 'care_options', 'wellness_program',\n",
            "       'seek_help', 'anonymity', 'leave', 'mental_health_consequence',\n",
            "       'phys_health_consequence', 'coworkers', 'supervisor',\n",
            "       'mental_health_interview', 'phys_health_interview',\n",
            "       'mental_vs_physical', 'obs_consequence'],\n",
            "      dtype='object')\n",
            "Shape of X: (1251, 22)\n",
            "Shape of y: (1251,)\n",
            "First few rows of X:\n",
            "         Age  Gender  self_employed  family_history  work_interfere  \\\n",
            "0  0.351852       0              0               0               2   \n",
            "1  0.481481       1              0               0               3   \n",
            "2  0.259259       1              0               0               3   \n",
            "3  0.240741       1              0               1               2   \n",
            "4  0.240741       1              0               0               1   \n",
            "\n",
            "   no_employees  remote_work  tech_company  benefits  care_options  ...  \\\n",
            "0             4            0             1         2             1  ...   \n",
            "1             5            0             0         0             0  ...   \n",
            "2             4            0             1         1             0  ...   \n",
            "3             2            0             1         1             2  ...   \n",
            "4             1            1             1         2             0  ...   \n",
            "\n",
            "   anonymity  leave  mental_health_consequence  phys_health_consequence  \\\n",
            "0          2      2                          1                        1   \n",
            "1          0      0                          0                        1   \n",
            "2          0      1                          1                        1   \n",
            "3          1      1                          2                        2   \n",
            "4          0      0                          1                        1   \n",
            "\n",
            "   coworkers  supervisor  mental_health_interview  phys_health_interview  \\\n",
            "0          1           2                        1                      0   \n",
            "1          0           0                        1                      1   \n",
            "2          2           2                        2                      2   \n",
            "3          1           0                        0                      0   \n",
            "4          1           2                        2                      2   \n",
            "\n",
            "   mental_vs_physical  obs_consequence  \n",
            "0                   2                0  \n",
            "1                   0                0  \n",
            "2                   1                0  \n",
            "3                   1                1  \n",
            "4                   0                0  \n",
            "\n",
            "[5 rows x 22 columns]\n",
            "First few rows of y:\n",
            " 0    1\n",
            "1    0\n",
            "2    0\n",
            "3    1\n",
            "4    0\n",
            "Name: treatment, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report\n",
        "import shap\n",
        "import joblib\n",
        "\n",
        "# Define mental health condition labels using K-Means clustering\n",
        "mental_health_features = [\"family_history\", \"work_interfere\", \"mental_health_consequence\", \"seek_help\", \"benefits\", \"leave\", \"care_options\", \"mental_vs_physical\", \"treatment\"]\n",
        "X_labels = df[mental_health_features]\n",
        "\n",
        "# Apply K-Means clustering to create mental health condition labels\n",
        "kmeans = KMeans(n_clusters=4, random_state=42, n_init=10)\n",
        "df[\"mental_health_condition\"] = kmeans.fit_predict(X_labels)\n",
        "\n",
        "# Define features (X) and new target (y)\n",
        "X = df.drop(columns=[\"mental_health_condition\"])\n",
        "y = df[\"mental_health_condition\"]\n",
        "\n",
        "# One-hot encode target labels for multi-class ROC-AUC\n",
        "onehot = OneHotEncoder()\n",
        "y_onehot = onehot.fit_transform(y.values.reshape(-1, 1)).toarray()\n",
        "\n",
        "# Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "y_test_onehot = onehot.transform(y_test.values.reshape(-1, 1)).toarray()\n",
        "\n",
        "# Define models\n",
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(max_iter=1000, random_state=42),\n",
        "    \"Random Forest\": RandomForestClassifier(n_estimators=100, random_state=42),\n",
        "    \"XGBoost\": XGBClassifier(eval_metric=\"mlogloss\", random_state=42)\n",
        "}\n",
        "\n",
        "# Train and evaluate each model\n",
        "results = {}\n",
        "for name, model in models.items():\n",
        "    model.fit(X_train, y_train)\n",
        "    y_pred = model.predict(X_test)\n",
        "    y_pred_proba = model.predict_proba(X_test)\n",
        "\n",
        "    # Compute evaluation metrics\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    precision = precision_score(y_test, y_pred, average='weighted')\n",
        "    recall = recall_score(y_test, y_pred, average='weighted')\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    roc_auc = roc_auc_score(y_test_onehot, y_pred_proba, multi_class='ovr')\n",
        "\n",
        "    results[name] = {\n",
        "        \"Accuracy\": accuracy,\n",
        "        \"Precision\": precision,\n",
        "        \"Recall\": recall,\n",
        "        \"F1-score\": f1,\n",
        "        \"ROC-AUC\": roc_auc\n",
        "    }\n",
        "\n",
        "# Print results\n",
        "print(\"Model Performance Comparison:\")\n",
        "for model, metrics in results.items():\n",
        "    print(f\"\\n{model}:\")\n",
        "    for metric, value in metrics.items():\n",
        "        print(f\"  {metric}: {value:.4f}\")\n",
        "\n",
        "# Select the best model (highest F1-score)\n",
        "best_model_name = max(results, key=lambda x: results[x][\"F1-score\"])\n",
        "best_model = models[best_model_name]\n",
        "\n",
        "# Save the best model\n",
        "joblib.dump(best_model, \"mental_health_model.pkl\")\n",
        "\n",
        "# SHAP Interpretation\n",
        "explainer = shap.Explainer(best_model, X_train)\n",
        "shap_values = explainer(X_test)\n",
        "shap.summary_plot(shap_values.values, X_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "NB3WZb5aA8mI",
        "outputId": "21715fe2-be61-4631-8c9a-6f3e6dced146"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Performance Comparison:\n",
            "\n",
            "Logistic Regression:\n",
            "  Accuracy: 1.0000\n",
            "  Precision: 1.0000\n",
            "  Recall: 1.0000\n",
            "  F1-score: 1.0000\n",
            "  ROC-AUC: 1.0000\n",
            "\n",
            "Random Forest:\n",
            "  Accuracy: 0.9641\n",
            "  Precision: 0.9665\n",
            "  Recall: 0.9641\n",
            "  F1-score: 0.9637\n",
            "  ROC-AUC: 1.0000\n",
            "\n",
            "XGBoost:\n",
            "  Accuracy: 0.9880\n",
            "  Precision: 0.9883\n",
            "  Recall: 0.9880\n",
            "  F1-score: 0.9880\n",
            "  ROC-AUC: 1.0000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1150x660 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install gradio shap joblib matplotlib pandas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rbP6X_Gl65TO",
        "outputId": "c8aa535f-8209-4fa6-f30b-ef8312d0cab8"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting gradio\n",
            "  Downloading gradio-5.15.0-py3-none-any.whl.metadata (16 kB)\n",
            "Requirement already satisfied: shap in /usr/local/lib/python3.11/dist-packages (0.46.0)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (1.4.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Collecting aiofiles<24.0,>=22.0 (from gradio)\n",
            "  Downloading aiofiles-23.2.1-py3-none-any.whl.metadata (9.7 kB)\n",
            "Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.7.1)\n",
            "Collecting fastapi<1.0,>=0.115.2 (from gradio)\n",
            "  Downloading fastapi-0.115.8-py3-none-any.whl.metadata (27 kB)\n",
            "Collecting ffmpy (from gradio)\n",
            "  Downloading ffmpy-0.5.0-py3-none-any.whl.metadata (3.0 kB)\n",
            "Collecting gradio-client==1.7.0 (from gradio)\n",
            "  Downloading gradio_client-1.7.0-py3-none-any.whl.metadata (7.1 kB)\n",
            "Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.28.1)\n",
            "Collecting huggingface-hub>=0.28.1 (from gradio)\n",
            "  Downloading huggingface_hub-0.28.1-py3-none-any.whl.metadata (13 kB)\n",
            "Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.1.5)\n",
            "Collecting markupsafe~=2.0 (from gradio)\n",
            "  Downloading MarkupSafe-2.1.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\n",
            "Requirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (1.26.4)\n",
            "Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.10.15)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from gradio) (24.2)\n",
            "Requirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (11.1.0)\n",
            "Requirement already satisfied: pydantic>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.10.6)\n",
            "Collecting pydub (from gradio)\n",
            "  Downloading pydub-0.25.1-py2.py3-none-any.whl.metadata (1.4 kB)\n",
            "Collecting python-multipart>=0.0.18 (from gradio)\n",
            "  Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)\n",
            "Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (6.0.2)\n",
            "Collecting ruff>=0.9.3 (from gradio)\n",
            "  Downloading ruff-0.9.4-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (25 kB)\n",
            "Collecting safehttpx<0.2.0,>=0.1.6 (from gradio)\n",
            "  Downloading safehttpx-0.1.6-py3-none-any.whl.metadata (4.2 kB)\n",
            "Collecting semantic-version~=2.0 (from gradio)\n",
            "  Downloading semantic_version-2.10.0-py2.py3-none-any.whl.metadata (9.7 kB)\n",
            "Collecting starlette<1.0,>=0.40.0 (from gradio)\n",
            "  Downloading starlette-0.45.3-py3-none-any.whl.metadata (6.3 kB)\n",
            "Collecting tomlkit<0.14.0,>=0.12.0 (from gradio)\n",
            "  Downloading tomlkit-0.13.2-py3-none-any.whl.metadata (2.7 kB)\n",
            "Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.15.1)\n",
            "Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.12.2)\n",
            "Collecting uvicorn>=0.14.0 (from gradio)\n",
            "  Downloading uvicorn-0.34.0-py3-none-any.whl.metadata (6.5 kB)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.7.0->gradio) (2024.10.0)\n",
            "Requirement already satisfied: websockets<15.0,>=10.0 in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.7.0->gradio) (14.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from shap) (1.13.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from shap) (1.6.1)\n",
            "Requirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.11/dist-packages (from shap) (4.67.1)\n",
            "Requirement already satisfied: slicer==0.0.8 in /usr/local/lib/python3.11/dist-packages (from shap) (0.0.8)\n",
            "Requirement already satisfied: numba in /usr/local/lib/python3.11/dist-packages (from shap) (0.60.0)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.11/dist-packages (from shap) (3.1.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.55.7)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (2024.12.14)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (1.0.7)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (3.17.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (2.32.3)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2.0->gradio) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.27.2 in /usr/local/lib/python3.11/dist-packages (from pydantic>=2.0->gradio) (2.27.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (8.1.8)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.4)\n",
            "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba->shap) (0.43.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->shap) (3.5.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.18.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.28.1->gradio) (3.4.1)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.28.1->gradio) (2.3.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n",
            "Downloading gradio-5.15.0-py3-none-any.whl (57.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.8/57.8 MB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading gradio_client-1.7.0-py3-none-any.whl (321 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m321.9/321.9 kB\u001b[0m \u001b[31m20.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading aiofiles-23.2.1-py3-none-any.whl (15 kB)\n",
            "Downloading fastapi-0.115.8-py3-none-any.whl (94 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m94.8/94.8 kB\u001b[0m \u001b[31m7.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading huggingface_hub-0.28.1-py3-none-any.whl (464 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m464.1/464.1 kB\u001b[0m \u001b[31m27.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading MarkupSafe-2.1.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (28 kB)\n",
            "Downloading python_multipart-0.0.20-py3-none-any.whl (24 kB)\n",
            "Downloading ruff-0.9.4-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.4/12.4 MB\u001b[0m \u001b[31m77.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading safehttpx-0.1.6-py3-none-any.whl (8.7 kB)\n",
            "Downloading semantic_version-2.10.0-py2.py3-none-any.whl (15 kB)\n",
            "Downloading starlette-0.45.3-py3-none-any.whl (71 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m71.5/71.5 kB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading tomlkit-0.13.2-py3-none-any.whl (37 kB)\n",
            "Downloading uvicorn-0.34.0-py3-none-any.whl (62 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.3/62.3 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading ffmpy-0.5.0-py3-none-any.whl (6.0 kB)\n",
            "Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n",
            "Installing collected packages: pydub, uvicorn, tomlkit, semantic-version, ruff, python-multipart, markupsafe, ffmpy, aiofiles, starlette, huggingface-hub, safehttpx, gradio-client, fastapi, gradio\n",
            "  Attempting uninstall: markupsafe\n",
            "    Found existing installation: MarkupSafe 3.0.2\n",
            "    Uninstalling MarkupSafe-3.0.2:\n",
            "      Successfully uninstalled MarkupSafe-3.0.2\n",
            "  Attempting uninstall: huggingface-hub\n",
            "    Found existing installation: huggingface-hub 0.27.1\n",
            "    Uninstalling huggingface-hub-0.27.1:\n",
            "      Successfully uninstalled huggingface-hub-0.27.1\n",
            "Successfully installed aiofiles-23.2.1 fastapi-0.115.8 ffmpy-0.5.0 gradio-5.15.0 gradio-client-1.7.0 huggingface-hub-0.28.1 markupsafe-2.1.5 pydub-0.25.1 python-multipart-0.0.20 ruff-0.9.4 safehttpx-0.1.6 semantic-version-2.10.0 starlette-0.45.3 tomlkit-0.13.2 uvicorn-0.34.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Load your dataset (modify the filename accordingly)\n",
        "df = pd.read_csv(\"survey_cleaned_normalized.csv\")  # Update this with your actual dataset file\n",
        "\n",
        "# Identify categorical columns that need encoding\n",
        "categorical_features = [\"Gender\", \"work_interfere\", \"family_history\", \"benefits\", \"care_options\", \"anonymity\", \"leave\"]  # Modify as per your dataset\n",
        "\n",
        "# Train LabelEncoders\n",
        "label_encoders = {col: LabelEncoder().fit(df[col]) for col in categorical_features}\n",
        "\n",
        "# Save encoders to a file\n",
        "joblib.dump(label_encoders, \"label_encoders.pkl\")\n",
        "\n",
        "print(\"✅ label_encoders.pkl has been created successfully!\")\n"
      ],
      "metadata": {
        "id": "vBPLooZBFHJd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8d37308d-1a54-495e-fbf8-e9855e0b18b8"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ label_encoders.pkl has been created successfully!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Basic Command-Line Testing**"
      ],
      "metadata": {
        "id": "XWbAWwzqfR2i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "import pandas as pd\n",
        "\n",
        "# Load trained model and encoders\n",
        "model = joblib.load(\"mental_health_model.pkl\")\n",
        "label_encoders = joblib.load(\"label_encoders.pkl\")\n",
        "\n",
        "# Min and Max age values from original dataset (used during normalization)\n",
        "AGE_MIN, AGE_MAX = 18, 100\n",
        "\n",
        "# Human-readable labels for the conditions\n",
        "condition_labels = [\"Depression\", \"Anxiety\", \"Bipolar Disorder\"]\n",
        "\n",
        "def preprocess_input(user_input):\n",
        "    \"\"\"Preprocess user input to match the model's expected feature set.\"\"\"\n",
        "    df = pd.DataFrame([user_input])\n",
        "\n",
        "    # Encode categorical values\n",
        "    for col, le in label_encoders.items():\n",
        "        if col in df.columns:\n",
        "            df[col] = le.transform(df[col])\n",
        "\n",
        "    # Normalize 'Age' column manually\n",
        "    if \"Age\" in df.columns:\n",
        "        df[\"Age\"] = (df[\"Age\"] - AGE_MIN) / (AGE_MAX - AGE_MIN)\n",
        "\n",
        "    # Add missing columns with default values and reorder columns\n",
        "    expected_features = model.feature_names_in_\n",
        "    missing_cols = set(expected_features) - set(df.columns)\n",
        "\n",
        "    for col in missing_cols:\n",
        "        df[col] = 0  # Default value for missing features\n",
        "\n",
        "    df = df[expected_features]  # Reorder columns as per model requirements\n",
        "    return df\n",
        "\n",
        "def predict_mental_health(age, gender, work_interference, family_history, benefits, care_options, anonymity, leave):\n",
        "    \"\"\"Predict mental health condition and provide explanations.\"\"\"\n",
        "    user_input = {\n",
        "        \"Age\": age,\n",
        "        \"Gender\": gender,  # Ensure gender is a string, not a list\n",
        "        \"work_interfere\": work_interference,  # Same for other categorical variables\n",
        "        \"family_history\": family_history,\n",
        "        \"benefits\": benefits,\n",
        "        \"care_options\": care_options,\n",
        "        \"anonymity\": anonymity,\n",
        "        \"leave\": leave\n",
        "    }\n",
        "\n",
        "    processed_input = preprocess_input(user_input)\n",
        "    prediction = model.predict(processed_input)[0]\n",
        "\n",
        "    # Check if the prediction is within the valid range\n",
        "    if prediction < 0 or prediction >= len(condition_labels):\n",
        "        prediction = 0  # Default to \"Depression\" if prediction is out of range\n",
        "\n",
        "    # Map condition to coping strategy\n",
        "    coping_strategies = {\n",
        "        \"Depression\": \"Try regular exercise, therapy, and social support.\",\n",
        "        \"Anxiety\": \"Practice mindfulness, deep breathing, and cognitive behavioral therapy.\",\n",
        "        \"Bipolar Disorder\": \"Maintain a consistent routine, take prescribed medications, and seek counseling.\",\n",
        "    }\n",
        "\n",
        "    # Map prediction to a human-readable condition\n",
        "    condition = condition_labels[prediction]\n",
        "    strategy = coping_strategies.get(condition, \"Consider consulting a mental health professional.\")\n",
        "\n",
        "    return condition, strategy\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Command-line user inputs\n",
        "    age = float(input(\"Enter age: \"))\n",
        "    gender = input(\"Enter gender (Male/Female/Other): \")\n",
        "    work_interference = input(\"Enter work interference (Often/Rarely/Never): \")\n",
        "    family_history = input(\"Do you have family history of mental illness? (Yes/No): \")\n",
        "    benefits = input(\"Does your company offer mental health benefits? (Yes/No): \")\n",
        "    care_options = input(\"Do you have access to care options? (Yes/No): \")\n",
        "    anonymity = input(\"Do you prefer anonymity? (Yes/No): \")\n",
        "    leave = input(\"How easy is it to take mental health leave? (Very easy/Somewhat easy/Somewhat difficult/Very difficult): \")\n",
        "\n",
        "    # Get prediction and strategy\n",
        "    condition, strategy = predict_mental_health(age, gender, work_interference, family_history, benefits, care_options, anonymity, leave)\n",
        "\n",
        "    # Output the result\n",
        "    print(f\"\\nPredicted Mental Health Condition: {condition}\")\n",
        "    print(f\"Coping Strategy: {strategy}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "htvFE4tFAz8v",
        "outputId": "1add50cd-71cc-4e6d-d268-e3c6d819cc38"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter age: 23\n",
            "Enter gender (Male/Female/Other): Male\n",
            "Enter work interference (Often/Rarely/Never): Often\n",
            "Do you have family history of mental illness? (Yes/No): No\n",
            "Does your company offer mental health benefits? (Yes/No): No\n",
            "Do you have access to care options? (Yes/No): No\n",
            "Do you prefer anonymity? (Yes/No): Yes\n",
            "How easy is it to take mental health leave? (Very easy/Somewhat easy/Somewhat difficult/Very difficult): Very difficult\n",
            "\n",
            "Predicted Mental Health Condition: Depression\n",
            "Coping Strategy: Try regular exercise, therapy, and social support.\n"
          ]
        }
      ]
    }
  ]
}